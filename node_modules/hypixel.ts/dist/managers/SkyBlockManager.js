"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SkyBlockManager = void 0;
const _1 = require(".");
const lib_1 = require("../lib");
const classes_1 = require("../classes");
class SkyBlockManager extends _1.BaseManager {
    constructor(client) {
        super(client);
    }
    async collections() {
        const { lastUpdated, version, collections } = await this.client.api.resources.skyblock.collections.get();
        return { lastUpdated, version, collections };
    }
    async skills() {
        const { lastUpdated, version, skills } = await this.client.api.resources.skyblock.skills.get();
        return { lastUpdated, version, skills };
    }
    async items() {
        const { lastUpdated, items } = await this.client.api.resources.skyblock.items.get();
        return { lastUpdated, items };
    }
    async getNews() {
        const { items } = await this.client.api.skyblock.news.get();
        return items;
    }
    async getAuction(uuid, type) {
        const query = {};
        switch (type) {
            case 'uuid':
            case 'player':
            case 'profile':
                query[type] = uuid;
        }
        const requestData = new lib_1.RequestData({ query });
        const { auctions } = await this.client.api.skyblock.auction.get(requestData);
        return auctions;
    }
    async getActiveAuctions(pageNumber = 0) {
        const query = new lib_1.RequestData({ query: { page: pageNumber } });
        const { page, totalPages, totalAuctions, lastUpdated, auctions } = await this.client.api.skyblock.auctions.get(query);
        return { page, totalPages, totalAuctions, lastUpdated, auctions };
    }
    async recentlyEndedAuctions() {
        const { lastUpdated, auctions } = await this.client.api.skyblock['auctions_ended'].get();
        return { lastUpdated, auctions };
    }
    async bazaar() {
        const { lastUpdated, products } = await this.client.api.skyblock.bazaar.get();
        return { lastUpdated, products };
    }
    async getProfile(nameOrUUID) {
        const isUUID = this.client.util.isUUID(nameOrUUID);
        const uuid = isUUID ? nameOrUUID : await this.client.util.getUUID(nameOrUUID);
        const requestData = new lib_1.RequestData({ query: { profile: uuid } });
        const { profile } = await this.client.api.skyblock.profile.get(requestData);
        return new classes_1.SkyBlockProfile(this.client, profile);
    }
}
exports.SkyBlockManager = SkyBlockManager;
//# sourceMappingURL=SkyBlockManager.js.map